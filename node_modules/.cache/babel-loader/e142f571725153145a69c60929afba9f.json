{"ast":null,"code":"import React, { Component } from 'react';\nimport withFirebaseAuth from 'react-with-firebase-auth';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport firebaseConfig from './firebaseConfig';\nimport logo from \"./logo.svg\";\nimport './App.css';\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nvar firebaseui = require('firebaseui');\n\nvar ui = new firebaseui.auth.AuthUI(firebase.auth());\nvar uiConfig = {\n  callbacks: {\n    signInSuccessWithAuthResult: function (authResult, redirectUrl) {\n      // User successfully signed in.\n      // Return type determines whether we continue the redirect automatically\n      // or whether we leave that to developer to handle.\n      return true;\n    },\n    uiShown: function () {\n      // The widget is rendered.\n      // Hide the loader.\n      document.getElementById('loader').style.display = 'none';\n    }\n  },\n  // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n  signInFlow: 'popup',\n  signInSuccessUrl: '<url-to-redirect-to-on-success>',\n  signInOptions: [// Leave the lines as is for the providers you want to offer your users.\n  firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.FacebookAuthProvider.PROVIDER_ID, firebase.auth.TwitterAuthProvider.PROVIDER_ID, firebase.auth.GithubAuthProvider.PROVIDER_ID, firebase.auth.EmailAuthProvider.PROVIDER_ID, firebase.auth.PhoneAuthProvider.PROVIDER_ID],\n  // Terms of service url.\n  tosUrl: '<your-tos-url>',\n  // Privacy policy url.\n  privacyPolicyUrl: '<your-privacy-policy-url>'\n}; // The start method will wait until the DOM is loaded.\n\nui.start('#firebaseui-auth-container', uiConfig); // class App extends Component {\n//   render() {\n//     const {\n//       user,\n//       signOut,\n//       signInWithGoogle,\n//     } = this.props;\n//\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           {\n//             user\n//               ? <p>Hello, {user.displayName}</p>\n//               : <p>Please sign in.</p>\n//           }\n//\n//           {\n//             user\n//               ? <button onClick={signOut}>Sign out</button>\n//               : <button onClick={signInWithGoogle}>Sign in with Google</button>\n//           }\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n//\n// const firebaseAppAuth = firebaseApp.auth();\n//\n// const providers = {\n//   googleProvider: new firebase.auth.GoogleAuthProvider(),\n// };\n//\n// export default withFirebaseAuth({\n//   providers,\n//   firebaseAppAuth,\n// })(App);\n\nexport default App;","map":{"version":3,"sources":["/Users/howardlin/Text2Pay/src/App.js"],"names":["React","Component","withFirebaseAuth","firebase","firebaseConfig","firebaseApp","initializeApp","firebaseui","require","ui","auth","AuthUI","uiConfig","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","uiShown","document","getElementById","style","display","signInFlow","signInSuccessUrl","signInOptions","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","TwitterAuthProvider","GithubAuthProvider","EmailAuthProvider","PhoneAuthProvider","tosUrl","privacyPolicyUrl","start","App"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,gBAAP,MAA6B,0BAA7B;AACA,OAAO,KAAKC,QAAZ,MAA0B,cAA1B;AACA,OAAO,eAAP;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,OAAO,WAAP;AAEA,MAAMC,WAAW,GAAGF,QAAQ,CAACG,aAAT,CAAuBF,cAAvB,CAApB;;AACA,IAAIG,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AAEA,IAAIC,EAAE,GAAG,IAAIF,UAAU,CAACG,IAAX,CAAgBC,MAApB,CAA2BR,QAAQ,CAACO,IAAT,EAA3B,CAAT;AAKA,IAAIE,QAAQ,GAAG;AACbC,EAAAA,SAAS,EAAE;AACTC,IAAAA,2BAA2B,EAAE,UAASC,UAAT,EAAqBC,WAArB,EAAkC;AAC7D;AACA;AACA;AACA,aAAO,IAAP;AACD,KANQ;AAOTC,IAAAA,OAAO,EAAE,YAAW;AAClB;AACA;AACAC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCC,OAAxC,GAAkD,MAAlD;AACD;AAXQ,GADE;AAcb;AACAC,EAAAA,UAAU,EAAE,OAfC;AAgBbC,EAAAA,gBAAgB,EAAE,iCAhBL;AAiBbC,EAAAA,aAAa,EAAE,CACb;AACArB,EAAAA,QAAQ,CAACO,IAAT,CAAce,kBAAd,CAAiCC,WAFpB,EAGbvB,QAAQ,CAACO,IAAT,CAAciB,oBAAd,CAAmCD,WAHtB,EAIbvB,QAAQ,CAACO,IAAT,CAAckB,mBAAd,CAAkCF,WAJrB,EAKbvB,QAAQ,CAACO,IAAT,CAAcmB,kBAAd,CAAiCH,WALpB,EAMbvB,QAAQ,CAACO,IAAT,CAAcoB,iBAAd,CAAgCJ,WANnB,EAObvB,QAAQ,CAACO,IAAT,CAAcqB,iBAAd,CAAgCL,WAPnB,CAjBF;AA0Bb;AACAM,EAAAA,MAAM,EAAE,gBA3BK;AA4Bb;AACAC,EAAAA,gBAAgB,EAAE;AA7BL,CAAf,C,CAgCA;;AACAxB,EAAE,CAACyB,KAAH,CAAS,4BAAT,EAAuCtB,QAAvC,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeuB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport withFirebaseAuth from 'react-with-firebase-auth'\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport firebaseConfig from './firebaseConfig';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nvar firebaseui = require('firebaseui');\n\nvar ui = new firebaseui.auth.AuthUI(firebase.auth());\n\n\n\n\nvar uiConfig = {\n  callbacks: {\n    signInSuccessWithAuthResult: function(authResult, redirectUrl) {\n      // User successfully signed in.\n      // Return type determines whether we continue the redirect automatically\n      // or whether we leave that to developer to handle.\n      return true;\n    },\n    uiShown: function() {\n      // The widget is rendered.\n      // Hide the loader.\n      document.getElementById('loader').style.display = 'none';\n    }\n  },\n  // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n  signInFlow: 'popup',\n  signInSuccessUrl: '<url-to-redirect-to-on-success>',\n  signInOptions: [\n    // Leave the lines as is for the providers you want to offer your users.\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n    firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n    firebase.auth.GithubAuthProvider.PROVIDER_ID,\n    firebase.auth.EmailAuthProvider.PROVIDER_ID,\n    firebase.auth.PhoneAuthProvider.PROVIDER_ID\n  ],\n  // Terms of service url.\n  tosUrl: '<your-tos-url>',\n  // Privacy policy url.\n  privacyPolicyUrl: '<your-privacy-policy-url>'\n};\n\n// The start method will wait until the DOM is loaded.\nui.start('#firebaseui-auth-container', uiConfig);\n\n// class App extends Component {\n//   render() {\n//     const {\n//       user,\n//       signOut,\n//       signInWithGoogle,\n//     } = this.props;\n//\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           {\n//             user\n//               ? <p>Hello, {user.displayName}</p>\n//               : <p>Please sign in.</p>\n//           }\n//\n//           {\n//             user\n//               ? <button onClick={signOut}>Sign out</button>\n//               : <button onClick={signInWithGoogle}>Sign in with Google</button>\n//           }\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n//\n// const firebaseAppAuth = firebaseApp.auth();\n//\n// const providers = {\n//   googleProvider: new firebase.auth.GoogleAuthProvider(),\n// };\n//\n// export default withFirebaseAuth({\n//   providers,\n//   firebaseAppAuth,\n// })(App);\nexport default App;\n"]},"metadata":{},"sourceType":"module"}